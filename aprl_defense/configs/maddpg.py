from typing import Dict, Tuple, List, Optional

import ray

train_default = {
    # === Log ===
    "log_level": "ERROR",

    # === Environment ===
    "env_config": {
        "scenario_name": None,  # IMPORTANT, overwrite
    },
    "num_envs_per_worker": 4,
    "horizon": 25,

    # === Policy Config ===
    # --- Model ---
    "good_policy": 'maddpg',
    "adv_policy": 'maddpg',
    "actor_hiddens": [64] * 2,
    "actor_hidden_activation": "relu",
    "critic_hiddens": [64] * 2,
    "critic_hidden_activation": "relu",
    "n_step": 1,
    "gamma": 0.95,

    # --- Exploration ---
    "tau": 0.01,

    # --- Replay buffer ---
    "buffer_size": 1000000,

    # --- Optimization ---
    "actor_lr": 1e-2,
    "critic_lr": 1e-2,
    "learning_starts": 1024 * 25,  # train_batch_size * max_episode_len,
    # "sample_batch_size": args.sample_batch_size,
    "train_batch_size": 1024,
    "batch_mode": "truncate_episodes",

    # --- Parallelism ---
    "num_workers": 1,
    "num_gpus": 0,
    "num_gpus_per_worker": 0,

    # === Multi-agent setting ===
    "multiagent": {  # IMPORTANT, overwrite these settings before using config
        "policies": None,
        "policy_mapping_fn": None
    },
}


def generate_multiagent(env, use_local_critic: List[bool], policies_to_train: Optional[List[str]]) -> dict:
    num_policies = 2
    assert len(use_local_critic) == num_policies
    policies = {}
    for i in range(0, num_policies):
        policies[f'policy_{i}'] = (
            None,
            env.observation_space_dict[i],
            env.action_space_dict[i],
            {
                'agent_id': i,
                'use_local_critic': use_local_critic[i]
                # "obs_space_dict": env.observation_space_dict,
                # "act_space_dict": env.action_space_dict
            }
        )
    policy_ids = list(policies.keys())
    policy_mapping_func = ray.tune.function(lambda i: policy_ids[i])

    multiagent = {'policies': policies,
                  'policy_mapping_fn': policy_mapping_func,
                  'policies_to_train': policies_to_train}

    return multiagent
