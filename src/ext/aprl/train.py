import ext.aprl.envs.wrappers

import functools
from ext.aprl.envs.multi_agent import (
    #     FlattenSingletonVecEnv,
    #     MergeAgentVecEnv,
    make_dummy_vec_multi_env,
    #     make_subproc_vec_multi_env,
)
from ext.aprl.training.lookback import OldMujocoResettableWrapper


def build_env(
        out_dir,
        _seed,
        env_name,
        num_env,
        embed_types,
        embed_index,
        mask_embed,
        mask_embed_kwargs,
        lookback_params,
        debug,
):
    pre_wrappers = []
    # if lookback_params["lb_num"] > 0:
    pre_wrappers.append(OldMujocoResettableWrapper)

    agent_wrappers = {}
    # if mask_embed:
    #     agent_wrappers = make_mask_agent_wrappers(env_name, embed_index, **mask_embed_kwargs)

    if len(embed_types) == 0:
        our_idx = 0
    else:
        our_idx = 1 - embed_index

    def env_fn(i):
        return ext.aprl.envs.wrappers.make_env(
            env_name,
            _seed,
            i,
            out_dir,
            our_idx,
            pre_wrappers=pre_wrappers,
            agent_wrappers=agent_wrappers,
        )

    # if not debug and num_env > 1:
    #     make_vec_env = make_subproc_vec_multi_env
    # else:
    make_vec_env = make_dummy_vec_multi_env
    multi_venv = make_vec_env([functools.partial(env_fn, i) for i in range(num_env)])
    # multi_venv = env_fn(0)
    # if debug and lookback_params["lb_num"] > 0:
    #     multi_venv = DebugVenv(multi_venv)

    if len(embed_types) == 0:
        assert multi_venv.num_agents == 1, "No embedding only works in single-agent environments."
    else:
        assert multi_venv.num_agents == 2, "Need two-agent environment when agent embedded."

    return multi_venv, our_idx
