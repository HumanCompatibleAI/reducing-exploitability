from pathlib import Path
from typing import Optional

import wandb
from ray.tune import Trainable

from aprl_defense.common.io import get_checkpoint_file


class ArtifactManager:
    def __init__(self,
                 save_remote: bool,
                 mode: str,
                 env_name: str,
                 metadata: dict,
                 local_checkpoint_dir: Path):
        """
        WandbArtifactManager manages receiving and saving all data such as models.
        The manager saves checkpoints using RLlib's Trainable.save() and optionally logs to wandb.

        :param save_remote: Whether to also log checkpoints to wandb
        :param mode: Mode of the run used in wandb artifact
        :param env_name: Name of the RL env, used in wandb artifact
        :param metadata: Metadata associated with the wandb artifact
        """

        # Arguments
        self.save_remote: bool = save_remote
        self.type: str = f'{mode}_{env_name}'
        self.name: str = wandb.run.id
        self.metadata: dict = metadata
        self.local_checkpoint_dir: Path = local_checkpoint_dir

        # These will be set later
        self.trainer: Optional[Trainable] = None

    def save_new_checkpoint(self) -> None:
        """
        Save a new checkpoint file according to the params of this manager. If self.save_remote, also log the resulting checkpoint files as an Artifact in wandb
        Attention: self.trainer and self.local_checkpoint_dir must be set, otherwise an exception is thrown.
        """
        # Check edge cases
        if self.trainer is None:
            raise ValueError('self.trainer must be set to appropriate trainable before logging checkpoints!')

        # Log checkpoint locally
        current_checkpoint_file = self.trainer.save(checkpoint_dir=str(self.local_checkpoint_dir))

        if self.save_remote:
            # Determine folder of new checkpoint
            current_checkpoint_dir = Path(current_checkpoint_file).parent

            # Create the artifact that will be logged
            # On subsequent calls with the same artifact name and type, wandb will log them as new versions of the artifact
            artifact = wandb.Artifact(name=self.name,
                                      type=self.type,
                                      metadata=self.metadata)
            # Every artifact also need to contain the params, such that it can be loaded
            artifact.add_file(str(self.local_checkpoint_dir / 'params.pkl'))
            # This contains the actual checkpoint files
            artifact.add_dir(str(current_checkpoint_dir), name=current_checkpoint_dir.name)

            wandb.log_artifact(artifact)

    def get_remote_checkpoint(self, artifact_identifier) -> Path:
        """
        Download the remote checkpoint given by the identifer and return Path to the checkpoint file.
        :return:
        """
        artifact: wandb.Artifact = wandb.use_artifact(artifact_identifier)

        # Download the artifact's contents
        artifact_dir = Path(artifact.download(root=self.local_checkpoint_dir / 'artifacts' / 'checkpoints'))

        path = get_checkpoint_file(artifact_dir.parent, specific_folder=False)

        return path