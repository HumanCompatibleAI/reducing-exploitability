from copy import deepcopy

import wandb
from tqdm import tqdm

import aprl_defense.configs.train
import aprl_defense.configs.eval
from aprl_defense.common.train import run_trainer
from aprl_defense.pbt.utils import create_pbt_eval_func
from aprl_defense.common.utils import create_trainer
from aprl_defense.training_manager import TrainingManager


class FixedIterPBTManager(TrainingManager):
    def __init__(self, env, log_dir: str, alg: str, max_timesteps: int, checkpoint_freq: int, override: str, main_id: int, scheduler_func, iter_steps=25000,
                 num_agents=10, evaluation_num_workers=10):
        super().__init__(env, log_dir, alg, max_timesteps, checkpoint_freq, override)

        self.iter_steps = 25000 if iter_steps is None else iter_steps
        self.main_id = main_id
        self.scheduler_func = scheduler_func
        self.num_agents = num_agents
        self.iter_steps = iter_steps

        self.stored_agents = {
            'current': [],
            'old': []
        }

        # Update config with settings that are specific to PBT
        self.config.update(aprl_defense.configs.train.pbt)

        self.config.update(aprl_defense.configs.eval.online_eval)

        # Apply conditional eval settings
        self.config.update({
            "custom_eval_function": create_pbt_eval_func(self.stored_agents, self.main_id),

            # Enable evaluation with given frequency
            "evaluation_interval": self.checkpoint_freq // 25,
        })

    def _train_loop(self, trainer):
        print(f'Running PBT')

        checkpoint_dir = self.log_dir / 'checkpoints'
        checkpoint_dir.mkdir(exist_ok=True, parents=True)

        # Initialize PBT training
        primary_name = f'policy_{self.main_id}'
        sec_id = 1 - self.main_id
        secondary_name = f'policy_{sec_id}'
        # Table that contains infos for each agent, used to determine next opponent.
        # Currently temporary simply represented by a dict
        agent_infos = {'num_agents': self.num_agents}
        for i in range(self.num_agents):
            self.stored_agents['current'].append(None)
            self.stored_agents['old'].append([])

        log_setup = [(primary_name, 'main'), (secondary_name, f'opponent_{sec_id}')]

        iter_lengths = []
        num_checkpoints_collected = 0
        timesteps_total = 0
        iterations = 0
        pbar = tqdm(total=self.max_timesteps)
        while timesteps_total < self.max_timesteps:
            # Determine id of secondary agent for this training iterations
            sec_id = self.scheduler_func(agent_infos)

            # Get stored weights, initialize new ones if necessary
            agent_weights = _get_agent_weights(sec_id, self.stored_agents, self.config, secondary_name, self.trainer_cls)
            # Use these weights in the trainer (for secondary agent)
            trainer.set_weights({secondary_name: agent_weights})

            # Log which opponent is being played against
            wandb.log({f'opponent_id': sec_id,
                       'timestep': timesteps_total + 1})  # The + 1 ensures this timestep does not have duplicate values for op_id
            timesteps_before = timesteps_total
            timesteps_total = run_trainer(trainer,
                                          -1,
                                          self.log_dir,
                                          timesteps_total + self.iter_steps,
                                          self.config,
                                          log_setup=log_setup,
                                          save=False,
                                          progress_bar=False)

            # Log which opponent was played against
            wandb.log({f'opponent_id': sec_id,
                       'timestep': timesteps_total})

            actual_iter_length = timesteps_total - timesteps_before  # In steps
            iter_lengths.append(actual_iter_length)

            running_avg_iter_length = sum(iter_lengths) / len(iter_lengths)
            wandb.log({f'avg_iter_length': running_avg_iter_length,
                       'timestep': timesteps_total})

            # Store updated weights
            new_weights = deepcopy(trainer.get_weights()[secondary_name])
            self.stored_agents['current'][sec_id] = new_weights

            # Save new checkpoint if applicable
            next_checkpoint_at = (num_checkpoints_collected + 1) * self.checkpoint_freq
            if timesteps_total > next_checkpoint_at:
                trainer.save(checkpoint_dir=checkpoint_dir)
                num_checkpoints_collected += 1

                # Update old opponents
                for i in range(len(self.stored_agents['current'])):
                    weights = _get_agent_weights(i, self.stored_agents, self.config, secondary_name, self.trainer_cls)
                    weights_copy = deepcopy(weights)
                    self.stored_agents['old'][i].append(weights_copy)

            iterations += 1
            pbar.update(timesteps_total - pbar.n)
        pbar.close()

    def _get_use_local_critic(self):
        return [False, False]

    def _get_policies_to_train(self):
        return None  # Trains all


def _get_agent_weights(id, stored_agents, config, sec_name, trainer_cls):
    agent = stored_agents['current'][id]
    if agent is None:
        agent = _init_new_weights(trainer_cls, config)[sec_name]
    return agent


def _init_new_weights(trainer_cls, config):
    # Create a new maddpg trainer which will be used to train the adversarial policy
    trainer = create_trainer(trainer_cls, config)
    new_weights = deepcopy(trainer.get_weights())
    return new_weights
