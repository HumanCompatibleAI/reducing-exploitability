from copy import deepcopy

import ray
import wandb
from tqdm import tqdm
from ray.rllib.agents import Trainer
from ray.rllib.evaluation import collect_metrics
from ray.rllib.evaluation.worker_set import WorkerSet

import aprl_defense.configs.train
from aprl_defense.common.train import run_trainer
from aprl_defense.training_manager import TrainingManager


class FixedIterPBTManager(TrainingManager):
    def __init__(self, log_dir: str, alg: str, max_timesteps: int, checkpoint_freq: int, override: str, main_id: int, scheduler_func, iter_steps=25000,
                 num_agents=10):
        super().__init__(log_dir, alg, max_timesteps, checkpoint_freq, override)

        self.iter_steps = 25000 if iter_steps is None else iter_steps
        self.main_id = main_id
        self.scheduler_func = scheduler_func
        self.num_agents = num_agents
        self.iter_steps = iter_steps

        self.stored_agents = {
            'current': [],
            'old': []
        }

        # Update config with settings that are specific to PBT
        self.config.update(aprl_defense.configs.train.pbt)

        self.config.update({
            "custom_eval_function": create_pbt_eval_func(self.stored_agents, self.main_id, self.trainer_cls),

            # Enable evaluation
            "evaluation_interval": self.checkpoint_freq // 25,

            # Run 10 episodes each time evaluation runs.
            "evaluation_num_episodes": 50,

            "evaluation_num_workers": self.num_agents,
        })

    def _train_loop(self, checkpoint_freq, max_steps, trainer, config):
        print(f'Running PBT')

        checkpoint_dir = self.log_dir / 'checkpoints'
        checkpoint_dir.mkdir(exist_ok=True, parents=True)

        # Initialize PBT training
        primary_name = f'policy_{self.main_id}'
        sec_id = 1 - self.main_id
        secondary_name = f'policy_{sec_id}'
        # Table that contains infos for each agent, used to determine next opponent.
        # Currently temporary simply represented by a dict
        agent_infos = {'num_agents': self.num_agents}
        for i in range(self.num_agents):
            self.stored_agents['current'].append(None)
            self.stored_agents['old'].append([])

        log_setup = [(primary_name, 'main'), (secondary_name, f'opponent_{sec_id}')]

        iter_lengths = []
        num_checkpoints_collected = 0
        timesteps_total = 0
        iterations = 0
        pbar = tqdm(total=max_steps)
        while timesteps_total < max_steps:
            # Determine id of secondary agent for this training iterations
            sec_id = self.scheduler_func(agent_infos)

            # Get stored weights, initialize new ones if necessary
            agent_weights = _get_agent_weights(sec_id, self.stored_agents, config, secondary_name, self.trainer_cls)
            # Use these weights in the trainer (for secondary agent)
            trainer.set_weights({secondary_name: agent_weights})

            # Log which opponent is being played against
            wandb.log({f'opponent_id': sec_id,
                       'timestep': timesteps_total + 1})  # The + 1 ensures this timestep does not have duplicate values for op_id
            timesteps_before = timesteps_total
            timesteps_total = run_trainer(trainer,
                                          -1,
                                          self.log_dir,
                                          timesteps_total + self.iter_steps,
                                          config,
                                          log_setup=log_setup,
                                          save=False,
                                          progress_bar=False)

            # Log which opponent was played against
            wandb.log({f'opponent_id': sec_id,
                       'timestep': timesteps_total})

            actual_iter_length = timesteps_total - timesteps_before  # In steps
            iter_lengths.append(actual_iter_length)

            running_avg_iter_length = sum(iter_lengths) / len(iter_lengths)
            wandb.log({f'avg_iter_length': running_avg_iter_length,
                       'timestep': timesteps_total})

            # Store updated weights
            new_weights = deepcopy(trainer.get_weights()[secondary_name])
            self.stored_agents['current'][sec_id] = new_weights

            # Save new checkpoint if applicable
            next_checkpoint_at = (num_checkpoints_collected + 1) * checkpoint_freq
            if timesteps_total > next_checkpoint_at:
                trainer.save(checkpoint_dir=checkpoint_dir)
                num_checkpoints_collected += 1

                # Update old opponents
                for i in range(len(self.stored_agents['current'])):
                    weights = _get_agent_weights(i, self.stored_agents, self.config, secondary_name, self.trainer_cls)
                    weights_copy = deepcopy(weights)
                    self.stored_agents['old'][i].append(weights_copy)

            iterations += 1
            pbar.update(timesteps_total - pbar.n)
        pbar.close()

    def _get_use_local_critic(self):
        return [False, False]

    def _get_policies_to_train(self):
        return None  # Trains all


def _get_agent_weights(id, stored_agents, config, sec_name, trainer_cls):
    agent = stored_agents['current'][id]
    if agent is None:
        agent = _init_new_weights(trainer_cls, config)[sec_name]
    return agent


def _init_new_weights(trainer_cls, config):
    # Create a new maddpg trainer which will be used to train the adversarial policy
    trainer = trainer_cls(env='mpe-push', config=config)
    new_weights = deepcopy(trainer.get_weights())
    return new_weights


def create_pbt_eval_func(stored_agents, main_id, trainer_cls):
    sec_id = 1 - main_id
    main_name = f'policy_{main_id}'
    secondary_name = f'policy_{sec_id}'

    # Define the function
    def pbt_eval_function(trainer: Trainer, eval_workers: WorkerSet):
        """Custom evaluation function for PBT.
        Args:
            trainer (Trainer): trainer class to evaluate.
            eval_workers (WorkerSet): evaluation workers.
        Returns:
            metrics (dict): evaluation metrics dict.
        """

        # We configured 2 eval workers in the training config.
        # worker_1, worker_2 = eval_workers.remote_workers()

        # Set different env settings for each worker. Here we use a fixed config,
        # which also could have been computed in each worker by looking at
        # env_config.worker_index (printed in SimpleCorridor class above).
        # worker_1.foreach_env.remote(lambda env: env.set_corridor_length(4))
        # worker_2.foreach_env.remote(lambda env: env.set_corridor_length(7))

        # Sanity check
        assert len(eval_workers.remote_workers()) == len(stored_agents['current'])

        if any([agent is None for agent in stored_agents]):
            # As long as not al agents have been trained against at least once, we don't start evaluation yet
            metrics = collect_metrics(eval_workers.local_worker(),
                                      eval_workers.remote_workers())
            return metrics  # We return an essentially empty metrics dict (contains a bunch of nans)

        my_eval_vals = {}

        for old_i in range(len(stored_agents['old'][0])):
            for i, worker in enumerate(eval_workers.remote_workers()):
                weights = stored_agents['old'][i][old_i]

                worker.set_weights.remote(({secondary_name: weights}))

            for i in range(trainer.config['evaluation_num_episodes']):
                # Calling .sample() runs exactly one episode per worker due to how the
                # eval workers are configured.
                ray.get([w.sample.remote() for w in eval_workers.remote_workers()])

            # Collect the accumulated episodes on the workers, and then summarize the
            # episode stats into a metrics dict.
            # episodes, _ = collect_episodes(
            #     remote_workers=eval_workers.remote_workers(), timeout_seconds=99999)
            # You can compute metrics from the episodes manually, or use the
            # convenient `summarize_episodes()` utility:
            # metrics = summarize_episodes(episodes)
            # Note that the above two statements are the equivalent of:
            metrics = collect_metrics(None, eval_workers.remote_workers())

            my_eval_vals[f'eval_old_{old_i}'] = metrics['policy_reward_mean'][main_name]

        for i, worker in enumerate(eval_workers.remote_workers()):
            weights = _get_agent_weights(i, stored_agents, trainer.config, secondary_name, trainer_cls)

            worker.set_weights.remote(({secondary_name: weights}))

        for i in range(trainer.config['evaluation_num_episodes']):
            # Calling .sample() runs exactly one episode per worker due to how the
            # eval workers are configured.
            ray.get([w.sample.remote() for w in eval_workers.remote_workers()])

        # Collect the accumulated episodes on the workers, and then summarize the
        # episode stats into a metrics dict.
        # episodes, _ = collect_episodes(
        #     remote_workers=eval_workers.remote_workers(), timeout_seconds=99999)
        # You can compute metrics from the episodes manually, or use the
        # convenient `summarize_episodes()` utility:
        # metrics = summarize_episodes(episodes)
        # Note that the above two statements are the equivalent of:
        metrics = collect_metrics(None, eval_workers.remote_workers())

        my_eval_vals[f'eval_current'] = metrics['policy_reward_mean'][main_name]

        # for worker in eval_workers.remote_workers():
        #     metrics = collect_metrics(eval_workers.local_worker(),
        #                               [worker])
        # TO log???
        # Log separate workers here?

        # You can also put custom values in the metrics dict.
        # metrics["foo"] = 1
        metrics['my_eval_vals'] = my_eval_vals
        return metrics
    # Return it
    return pbt_eval_function