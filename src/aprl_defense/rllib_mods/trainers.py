from typing import Type, Dict

import ray
from ray.rllib.agents.ppo import PPOTrainer
from ray.rllib.agents.ppo.ppo_tf_policy import ppo_surrogate_loss, kl_and_loss_stats, compute_and_clip_gradients, vf_preds_fetches, setup_config, setup_mixins, \
    KLCoeffMixin, ValueNetworkMixin
from ray.rllib.evaluation.postprocessing import (
    compute_gae_for_sample_batch,
)
from ray.rllib.policy.policy import Policy
from ray.rllib.policy.tf_policy import LearningRateSchedule, EntropyCoeffSchedule
from ray.rllib.policy.tf_policy_template import build_tf_policy
from ray.rllib.utils.annotations import override
from ray.rllib.utils.typing import (
    TrainerConfigDict, TensorType,
)


# WIP
def _grad_stats_fn(policy: Policy, sample_batch, model_gradients) ->Dict[str, TensorType]:
    print(f"ARGS")
    print(f"KWARGS7")
    return {}


class PPOTrainerWithStats(PPOTrainer):
    @override(PPOTrainer)
    def get_default_policy_class(self, config: TrainerConfigDict) -> Type[Policy]:
        if config["framework"] == "torch":
            from ray.rllib.agents.ppo.ppo_torch_policy import PPOTorchPolicy

            print(f'WARNING: Stats not implemented yet for Torch')
            return PPOTorchPolicy
        else:
            # Copied from
            return build_tf_policy(
                name="PPOTFPolicy",
                loss_fn=ppo_surrogate_loss,
                get_default_config=lambda: ray.rllib.agents.ppo.ppo.DEFAULT_CONFIG,
                postprocess_fn=compute_gae_for_sample_batch,
                stats_fn=kl_and_loss_stats,
                compute_gradients_fn=compute_and_clip_gradients,
                extra_action_out_fn=vf_preds_fetches,
                before_init=setup_config,
                before_loss_init=setup_mixins,
                mixins=[
                    LearningRateSchedule,
                    EntropyCoeffSchedule,
                    KLCoeffMixin,
                    ValueNetworkMixin,
                ],
                grad_stats_fn=_grad_stats_fn  # This is what I added and the reason this class exists

            )
